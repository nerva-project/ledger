#!/bin/bash
source "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"/include/env

function upload_seed()
{
	python3 -m ledgerblue.seedconv online
}

function verify_app()
{
    source ${INCLUDE_DIR}/keys/pub
    source ${INCLUDE_DIR}/appinfo

    python3 -m ledgerblue.loadApp               \
        --targetId ${DEVICE_ID}                 \
        --fileName ${ROOT_DIR}/bin/app.hex      \
        --targetVersion ${TARGET_VER}           \
        --appName ${APP_NAME}                   \
        --appVersion ${APP_VER}                 \
        --tlv                                   \
        --offline true                          \
        --verifyApp                             \
        --signPublicKey ${SIGN_PUB_KEY}         \
        --signature ${APPINFO_SIG}
}

function load_app()
{
    source ${INCLUDE_DIR}/keys/pri
    source ${INCLUDE_DIR}/keys/pub
    source ${INCLUDE_DIR}/appinfo

    python3 -m ledgerblue.loadApp               \
        --targetId ${DEVICE_ID}                 \
        --fileName ${ROOT_DIR}/bin/app.hex      \
        --targetVersion ${TARGET_VER}           \
        --appName ${APP_NAME}                   \
        --appVersion ${APP_VER}                 \
        --dataSize ${APPINFO_SIZE}              \
        --icon ${APPINFO_ICON_HEX}              \
        --appFlags 0x40                         \
        --path "44'/14336'"                     \
        --curve secp256k1                       \
        --tlv                                   \
        --delete                                \
        --signApp                               \
        --signPrivateKey ${SIGN_PRI_KEY}
}

function delete_app()
{
    python3 -m ledgerblue.deleteApp             \
        --targetId ${DEVICE_ID}                 \
        --appName ${APP_NAME}
}

function device_check()
{
	python3 -m ledgerblue.checkGenuine --targetId ${DEVICE_ID}
}

function device_reset_ca()
{
    python3 -m ledgerblue.resetCustomCA --targetId ${DEVICE_ID}
}

function device_set_ca()
{
    source ${INCLUDE_DIR}/keys/pub

    python3 -m ledgerblue.setupCustomCA         \
        --targetId ${DEVICE_ID}                 \
        --public ${SIGN_PUB_KEY}                \
        --name "Nerva"
}

function clean()
{
    rm -rf ${INCLUDE_DIR}/info/* ${ROOT_DIR}/obj ${ROOT_DIR}/bin ${ROOT_DIR}/debug ${ROOT_DIR}/dep ${ROOT_DIR}/src/glyphs.c ${ROOT_DIR}/src/glyphs.h
}

function uninstall()
{
    clean
    rm -rf ${SCRIPT_DIR}/loader
    docker rmi nerva/ledger-${SDK_VER}
}

function build_app()
{
    source ${INCLUDE_DIR}/keys/pri

    env_run_docker make

    icon_hex="$(python3 -m ledgerblue.icon ${ROOT_DIR}/images/icon_nerva.gif hexbitmaponly)"

    envram="$(cat ${ROOT_DIR}/debug/app.map | grep _envram_data | tr -s ' ' | cut -f2 -d ' ')"
    nvram_data="$(cat ${ROOT_DIR}/debug/app.map | grep _nvram_data | tr -s ' ' | cut -f2 -d ' ')"

    data_size=$((envram - nvram_data))

    echo "export APPINFO_SIZE=${data_size}" > ${INCLUDE_DIR}/appinfo
    echo "export APPINFO_ICON_HEX=${icon_hex}" >> ${INCLUDE_DIR}/appinfo

    info=$(python3 -m ledgerblue.loadApp        \
        --targetId ${DEVICE_ID}                 \
        --fileName ${ROOT_DIR}/bin/app.hex      \
        --targetVersion ${TARGET_VER}           \
        --appName ${APP_NAME}                   \
        --appVersion ${APP_VER}                 \
        --tlv                                   \
        --offline true                          \
        --signApp                               \
        --signPrivateKey ${SIGN_PRI_KEY})

    echo "export APPINFO_SIG=${info:2:-1}" >> ${INCLUDE_DIR}/appinfo
}

function create_signing_key()
{
    keypair=($(python3 -m ledgerblue.genCAPair))
    mkdir -p ${INCLUDE_DIR}/keys
    echo "export SIGN_PUB_KEY=${keypair[0]}" > ${INCLUDE_DIR}/keys/pub
    echo "export SIGN_PRI_KEY=${keypair[1]}" > ${INCLUDE_DIR}/keys/pri
}

function env_build_virtualenv()
{
    if ! [ -d "${SCRIPT_DIR}/loader" ]; then
        virtualenv -p python3 ${SCRIPT_DIR}/loader
        source ${SCRIPT_DIR}/loader/bin/activate
        pip3 install --upgrade pycryptodomex ECPy readline hidapi protobuf future pillow python-u2flib-host websocket_client
        pip3 install ledgerblue

        pkgdir=$(python3 -c "from distutils.sysconfig import get_python_lib; print(get_python_lib())")

        if [ ! -d "${pkgdir}" ]; then
            echo "Could not determine site-packages folder. Most functionality will be unavailable"
        else
            cp -r ${ROOT_DIR}/external/loader/ledgerblue ${pkgdir}
            cp -r ${ROOT_DIR}/tools/python/src/ledger/monero/dictionaries ${pkgdir}/ledgerblue
            cp -r ${ROOT_DIR}/tools/python/src/ledger/monero/seedconv.py ${pkgdir}/ledgerblue/seedconv.py
            cp ${ROOT_DIR}/external/sdk/icon.py ${pkgdir}/ledgerblue/icon.py
        fi
    else
        source ${SCRIPT_DIR}/loader/bin/activate
    fi
}

function env_download_tarballs()
{
    mkdir -p ${ROOT_DIR}/external/env

    if [ ! -f "${ROOT_DIR}/external/env/gcc.tar.bz2" ]; then
        curl -L https://launchpad.net/gcc-arm-embedded/5.0/5-2016-q1-update/+download/gcc-arm-none-eabi-5_3-2016q1-20160330-linux.tar.bz2 \
        --output ${ROOT_DIR}/external/env/gcc.tar.bz2
    fi

    if [ ! -d "${ROOT_DIR}/external/env/gcc-arm-none-eabi-5_3-2016q1" ]; then
        echo "217850b0f3297014e8e52010aa52da0a83a073ddec4dc49b1a747458c5d6a223 ${ROOT_DIR}/external/env/gcc.tar.bz2" | sha256sum -c

        if [ $? -ne 0 ]; then
            echo "gcc.tar.bz2 is corrupt"
            rm ${ROOT_DIR}/external/env/gcc.tar.bz2
            exit 1
        else
            tar -xvf ${ROOT_DIR}/external/env/gcc.tar.bz2 -C ${ROOT_DIR}/external/env
        fi
    fi

    if [ ! -f "${ROOT_DIR}/external/env/clang.tar.xz" ]; then
        curl -L https://releases.llvm.org/4.0.0/clang+llvm-4.0.0-x86_64-linux-gnu-ubuntu-16.04.tar.xz \
        --output ${ROOT_DIR}/external/env/clang.tar.xz
    fi

    if [ ! -d "${ROOT_DIR}/external/env/clang-arm-fropi" ]; then
        echo "8e920c166b00e7869cea443e305933cc410bd1b982c7c5dc56995b6cffb0586f ${ROOT_DIR}/external/env/clang.tar.xz" | sha256sum -c

        if [ $? -ne 0 ]; then
            echo "clang.tar.xz is corrupt"
            rm ${ROOT_DIR}/external/env/clang.tar.xz
            exit 1
        else
            tar -xvf ${ROOT_DIR}/external/env/clang.tar.xz -C ${ROOT_DIR}/external/env
            mv ${ROOT_DIR}/external/env/clang+llvm-4.0.0-x86_64-linux-gnu-ubuntu-16.04 ${ROOT_DIR}/external/env/clang-arm-fropi
        fi
    fi
}

function env_build_docker()
{
    env_download_tarballs

    if [ ! "$(docker images --format '{{.Repository}}:{{.Tag}}' | grep nerva/ledger-${SDK_VER})" ]; then
        cd ${ROOT_DIR}/external/sdk
        git checkout tags/nanos-${SDK_VER}
        docker build --build-arg SDK_VER=${SDK_VER} -t nerva/ledger-${SDK_VER} - < ${ROOT_DIR}/Dockerfile
    fi
}

function env_run_docker()
{
    env_build_docker
    action=$1
    echo Running Action: "${action}"
    docker run --rm -i --privileged -v ${ROOT_DIR}:/code -v ${ROOT_DIR}/external/sdk:/opt/bolos-sdk -v ${ROOT_DIR}/external/env:/opt/bolos-env --user 1000:1000 --name nerva_ledger -t nerva/ledger-${SDK_VER} /bin/bash -c "${action}"
}

env_build_docker
env_build_virtualenv

if [ $# -eq 0 ]; then
    echo "TODO: Help"
else
    $1
fi
